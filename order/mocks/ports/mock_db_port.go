// Code generated by mockery v2.38.0. DO NOT EDIT.

package ports

import (
	domain "github.com/huytran2000-hcmus/grpc-microservices/order/internal/appication/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockDBPort is an autogenerated mock type for the DBPort type
type MockDBPort struct {
	mock.Mock
}

type MockDBPort_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBPort) EXPECT() *MockDBPort_Expecter {
	return &MockDBPort_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *MockDBPort) Get(id int64) (domain.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (domain.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) domain.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDBPort_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDBPort_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id int64
func (_e *MockDBPort_Expecter) Get(id interface{}) *MockDBPort_Get_Call {
	return &MockDBPort_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockDBPort_Get_Call) Run(run func(id int64)) *MockDBPort_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockDBPort_Get_Call) Return(_a0 domain.Order, _a1 error) *MockDBPort_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDBPort_Get_Call) RunAndReturn(run func(int64) (domain.Order, error)) *MockDBPort_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *MockDBPort) Save(_a0 *domain.Order) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Order) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDBPort_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockDBPort_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 *domain.Order
func (_e *MockDBPort_Expecter) Save(_a0 interface{}) *MockDBPort_Save_Call {
	return &MockDBPort_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *MockDBPort_Save_Call) Run(run func(_a0 *domain.Order)) *MockDBPort_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Order))
	})
	return _c
}

func (_c *MockDBPort_Save_Call) Return(_a0 error) *MockDBPort_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDBPort_Save_Call) RunAndReturn(run func(*domain.Order) error) *MockDBPort_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBPort creates a new instance of MockDBPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBPort {
	mock := &MockDBPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
